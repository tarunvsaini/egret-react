{"ast":null,"code":"import _classCallCheck from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/tarunsaini/Projects/arctic-admin/react/src/app/views/charts/victory-charts/CircularProgressBar.jsx\";\nimport React, { Component } from \"react\";\nimport { VictoryPie, VictoryAnimation, VictoryLabel } from \"victory\";\nimport { withStyles } from \"@material-ui/core\";\n\nvar CircularProgressBar = /*#__PURE__*/function (_Component) {\n  _inherits(CircularProgressBar, _Component);\n\n  var _super = _createSuper(CircularProgressBar);\n\n  function CircularProgressBar() {\n    var _this;\n\n    _classCallCheck(this, CircularProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      percent: 0,\n      data: _this.getData(0)\n    };\n    return _this;\n  }\n\n  _createClass(CircularProgressBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var percent = 0;\n      this.setStateInterval = window.setInterval(function () {\n        percent += 25;\n        percent = percent > 100 ? 0 : percent;\n\n        _this2.setState({\n          percent: percent,\n          data: _this2.getData(percent)\n        });\n      }, 2000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.setInterval) window.clearInterval(this.setStateInterval);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(percent) {\n      return [{\n        x: 1,\n        y: percent\n      }, {\n        x: 2,\n        y: 100 - percent\n      }];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var theme = this.props.theme;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"320px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        viewBox: \"0 0 400 400\",\n        width: \"100%\",\n        height: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VictoryPie, {\n        standalone: false,\n        animate: {\n          duration: 1000\n        },\n        width: 400,\n        height: 400,\n        data: this.state.data,\n        innerRadius: 120,\n        cornerRadius: 25,\n        labels: function labels() {\n          return null;\n        },\n        style: {\n          data: {\n            fill: function fill(d) {\n              var color = d.y > 30 ? \"green\" : \"red\";\n              return d.x === 1 ? color : \"transparent\";\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAnimation, {\n        duration: 1000,\n        data: this.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, function (newProps) {\n        return /*#__PURE__*/React.createElement(VictoryLabel, {\n          textAnchor: \"middle\",\n          verticalAnchor: \"middle\",\n          x: 200,\n          y: 200,\n          text: \"\".concat(Math.round(newProps.percent), \"%\"),\n          style: {\n            fontSize: 45,\n            fill: theme.palette.text.secondary\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }\n        });\n      })));\n    }\n  }]);\n\n  return CircularProgressBar;\n}(Component);\n\nexport default withStyles({}, {\n  withTheme: true\n})(CircularProgressBar);","map":{"version":3,"sources":["/Users/tarunsaini/Projects/arctic-admin/react/src/app/views/charts/victory-charts/CircularProgressBar.jsx"],"names":["React","Component","VictoryPie","VictoryAnimation","VictoryLabel","withStyles","CircularProgressBar","state","percent","data","getData","setStateInterval","window","setInterval","setState","clearInterval","x","y","theme","props","height","duration","fill","d","color","newProps","Math","round","fontSize","palette","text","secondary","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { VictoryPie, VictoryAnimation, VictoryLabel } from \"victory\";\nimport { withStyles } from \"@material-ui/core\";\n\nclass CircularProgressBar extends Component {\n  state = {\n    percent: 0,\n    data: this.getData(0)\n  };\n\n  componentDidMount() {\n    let percent = 0;\n    this.setStateInterval = window.setInterval(() => {\n      percent += 25;\n      percent = percent > 100 ? 0 : percent;\n      this.setState({\n        percent,\n        data: this.getData(percent)\n      });\n    }, 2000);\n  }\n\n  componentWillUnmount() {\n    if (this.setInterval) window.clearInterval(this.setStateInterval);\n  }\n\n  getData(percent) {\n    return [{ x: 1, y: percent }, { x: 2, y: 100 - percent }];\n  }\n\n  render() {\n    let { theme } = this.props;\n\n    return (\n      <div style={{ height: \"320px\" }}>\n        <svg viewBox=\"0 0 400 400\" width=\"100%\" height=\"100%\">\n          <VictoryPie\n            standalone={false}\n            animate={{ duration: 1000 }}\n            width={400}\n            height={400}\n            data={this.state.data}\n            innerRadius={120}\n            cornerRadius={25}\n            labels={() => null}\n            style={{\n              data: {\n                fill: d => {\n                  const color = d.y > 30 ? \"green\" : \"red\";\n                  return d.x === 1 ? color : \"transparent\";\n                }\n              }\n            }}\n          />\n          <VictoryAnimation duration={1000} data={this.state}>\n            {newProps => {\n              return (\n                <VictoryLabel\n                  textAnchor=\"middle\"\n                  verticalAnchor=\"middle\"\n                  x={200}\n                  y={200}\n                  text={`${Math.round(newProps.percent)}%`}\n                  style={{ fontSize: 45, fill: theme.palette.text.secondary }}\n                />\n              );\n            }}\n          </VictoryAnimation>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default withStyles({}, { withTheme: true })(CircularProgressBar);\n"]},"metadata":{},"sourceType":"module"}