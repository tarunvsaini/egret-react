{"ast":null,"code":"import _classCallCheck from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tarunsaini/Projects/arctic-admin/react/src/app/views/Drag&Drop/SimpleHorizontalList.jsx\";\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nvar getItems = function getItems(count) {\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k),\n      content: \"item \".concat(k)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: \"0 \".concat(grid, \"px 0 0\"),\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\"\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    display: \"flex\",\n    padding: grid,\n    overflow: \"auto\"\n  };\n};\n\nvar SimpleHorizontalList = /*#__PURE__*/function (_Component) {\n  _inherits(SimpleHorizontalList, _Component);\n\n  var _super = _createSuper(SimpleHorizontalList);\n\n  function SimpleHorizontalList(props) {\n    var _this;\n\n    _classCallCheck(this, SimpleHorizontalList);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: getItems(6)\n    };\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SimpleHorizontalList, [{\n    key: \"onDragEnd\",\n    value: function onDragEnd(result) {\n      // dropped outside the list\n      if (!result.destination) {\n        return;\n      }\n\n      var items = reorder(this.state.items, result.source.index, result.destination.index);\n      this.setState({\n        items: items\n      });\n    } // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, function (provided, snapshot) {\n        return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver)\n        }, provided.droppableProps, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }\n        }), _this2.state.items.map(function (item, index) {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }\n          }, function (provided, snapshot) {\n            return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 21\n              }\n            }), item.content);\n          });\n        }), provided.placeholder);\n      }));\n    }\n  }]);\n\n  return SimpleHorizontalList;\n}(Component);\n\nexport default SimpleHorizontalList;","map":{"version":3,"sources":["/Users/tarunsaini/Projects/arctic-admin/react/src/app/views/Drag&Drop/SimpleHorizontalList.jsx"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","display","overflow","SimpleHorizontalList","props","state","items","onDragEnd","bind","destination","source","index","setState","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleHorizontalList;\n"]},"metadata":{},"sourceType":"module"}