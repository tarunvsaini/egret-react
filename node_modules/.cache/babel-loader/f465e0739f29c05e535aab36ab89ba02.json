{"ast":null,"code":"import _toConsumableArray from \"/Users/tarunsaini/Projects/arctic-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport Mock from \"../mock\";\nimport shortId from \"shortid\";\nvar NotificationDB = {\n  list: [{\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570702802573,\n    title: \"New message from Devid\",\n    subtitle: \"Hello, Let's chit chat...\",\n    path: \"chat\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Alert\",\n    icon: {\n      name: \"notifications\",\n      color: \"error\"\n    },\n    timestamp: 1570702702573,\n    title: \"Server overloaded\",\n    subtitle: \"Traffice reached 2M\",\n    path: \"page-layouts/user-profile\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570502502573,\n    title: \"New message from Goustove\",\n    subtitle: \"Hello, Let's chit chat...\",\n    path: \"chat\"\n  }]\n};\nMock.onGet(\"/api/notification\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/add\").reply(function (config) {\n  var response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete\").reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      id = _JSON$parse.id;\n\n  console.log(id);\n  var response = NotificationDB.list.filter(function (notification) {\n    return notification.id !== id;\n  });\n  NotificationDB.list = _toConsumableArray(response);\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete-all\").reply(function (config) {\n  NotificationDB.list = [];\n  var response = NotificationDB.list;\n  return [200, response];\n});","map":{"version":3,"sources":["/Users/tarunsaini/Projects/arctic-admin/react/src/fake-db/db/notification.js"],"names":["Mock","shortId","NotificationDB","list","id","generate","heading","icon","name","color","timestamp","title","subtitle","path","onGet","reply","config","response","onPost","JSON","parse","data","console","log","filter","notification"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,MADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,wBART;AASEC,IAAAA,QAAQ,EAAE,2BATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GADI,EAaJ;AACET,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,OAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,eADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,mBART;AASEC,IAAAA,QAAQ,EAAE,qBATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GAbI,EAyBJ;AACET,IAAAA,EAAE,EAAEH,OAAO,CAACI,QAAR,EADN;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,MADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAHR;AAOEC,IAAAA,SAAS,EAAE,aAPb;AAQEC,IAAAA,KAAK,EAAE,2BART;AASEC,IAAAA,QAAQ,EAAE,2BATZ;AAUEC,IAAAA,IAAI,EAAE;AAVR,GAzBI;AADe,CAAvB;AAyCAb,IAAI,CAACc,KAAL,CAAW,mBAAX,EAAgCC,KAAhC,CAAsC,UAAAC,MAAM,EAAI;AAC9C,MAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACD,CAHD;AAKAjB,IAAI,CAACkB,MAAL,CAAY,uBAAZ,EAAqCH,KAArC,CAA2C,UAAAC,MAAM,EAAI;AACnD,MAAMC,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACD,CAHD;AAKAjB,IAAI,CAACkB,MAAL,CAAY,0BAAZ,EAAwCH,KAAxC,CAA8C,UAAAC,MAAM,EAAI;AACtD,oBAAaG,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACK,IAAlB,CAAb;AAAA,MAAMjB,EAAN,eAAMA,EAAN;;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,EAAZ;AAEA,MAAMa,QAAQ,GAAGf,cAAc,CAACC,IAAf,CAAoBqB,MAApB,CACf,UAAAC,YAAY;AAAA,WAAIA,YAAY,CAACrB,EAAb,KAAoBA,EAAxB;AAAA,GADG,CAAjB;AAGAF,EAAAA,cAAc,CAACC,IAAf,sBAA0Bc,QAA1B;AACA,SAAO,CAAC,GAAD,EAAMA,QAAN,CAAP;AACD,CATD;AAWAjB,IAAI,CAACkB,MAAL,CAAY,8BAAZ,EAA4CH,KAA5C,CAAkD,UAAAC,MAAM,EAAI;AAC1Dd,EAAAA,cAAc,CAACC,IAAf,GAAsB,EAAtB;AACA,MAAMc,QAAQ,GAAGf,cAAc,CAACC,IAAhC;AACA,SAAO,CAAC,GAAD,EAAMc,QAAN,CAAP;AACD,CAJD","sourcesContent":["import Mock from \"../mock\";\nimport shortId from \"shortid\";\n\nconst NotificationDB = {\n  list: [\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: {\n        name: \"chat\",\n        color: \"primary\"\n      },\n      timestamp: 1570702802573,\n      title: \"New message from Devid\",\n      subtitle: \"Hello, Let's chit chat...\",\n      path: \"chat\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Alert\",\n      icon: {\n        name: \"notifications\",\n        color: \"error\"\n      },\n      timestamp: 1570702702573,\n      title: \"Server overloaded\",\n      subtitle: \"Traffice reached 2M\",\n      path: \"page-layouts/user-profile\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: {\n        name: \"chat\",\n        color: \"primary\"\n      },\n      timestamp: 1570502502573,\n      title: \"New message from Goustove\",\n      subtitle: \"Hello, Let's chit chat...\",\n      path: \"chat\"\n    }\n  ]\n};\n\nMock.onGet(\"/api/notification\").reply(config => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/add\").reply(config => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/delete\").reply(config => {\n  let { id } = JSON.parse(config.data);\n  console.log(id);\n\n  const response = NotificationDB.list.filter(\n    notification => notification.id !== id\n  );\n  NotificationDB.list = [...response];\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/delete-all\").reply(config => {\n  NotificationDB.list = [];\n  const response = NotificationDB.list;\n  return [200, response];\n});\n"]},"metadata":{},"sourceType":"module"}